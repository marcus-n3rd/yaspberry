service: domain-service

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'devops/webpack/webpack.config.js'
    includeModules:
      packagePath: 'package.json'
      forceExclude:
        - aws-sdk
        - '@types/aws-lambda'
    packager: 'npm'
    excludeFiles: 'src/**/*.test.js'

provider:
  name: aws
  runtime: nodejs12.x

  # Defaults
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:ConditionCheck'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:UpdateItem'
      Resource: 
        - 'Fn::Join':
          - ':'
          - - arn
            - Ref: 'AWS::Partition'
            - dynamodb
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - table/${self:resources.Resources.DataTable.Properties.TableName}

  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    DATA_TABLE: ${self:resources.Resources.DataTable.Properties.TableName}

functions: {} # These will be generated by utility, ./devops/gotswag

resources:
  Resources:
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-domainTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK # Partition Key
            AttributeType: S
          - AttributeName: SK # Sort Key
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
