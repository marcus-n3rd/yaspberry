# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: domain-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      packagePath: 'package.json'
      forceExclude:
        - aws-sdk
    packager: 'npm'
    excludeFiles: 'src/**/*.test.js'
# TODO: add source maps https://github.com/serverless-heaven/serverless-webpack/issues/228#issuecomment-330504278

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:ConditionCheck'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:UpdateItem'
      Resource: 
        - 'Fn::Join':
          - ':'
          - - arn
            - Ref: 'AWS::Partition'
            - dynamodb
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - table/${self:resources.Resources.DataTable.Properties.TableName}

functions:
  domainsIdGet:
    handler: src/_lambda-handlers/domainsIdGet.handler
    events:
      - http:
          path: domains/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
    environment:
      DATA_TABLE: ${self:resources.Resources.DataTable.Properties.TableName}

  domainsIdPut:
    handler: src/_lambda-handlers/domainsIdPut.handler
    events:
      - http:
          path: domains/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
    environment:
      DATA_TABLE: ${self:resources.Resources.DataTable.Properties.TableName}

# you can add CloudFormation resource templates here
resources:
  Resources:
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-domainTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PK # Partition Key
            AttributeType: S
          - AttributeName: SK # Sort Key
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
